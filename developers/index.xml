<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Developers on</title><link>https://yio-remote.github.io/documentation/developers/</link><description>Recent content in Developers on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://yio-remote.github.io/documentation/developers/index.xml" rel="self" type="application/rss+xml"/><item><title>API</title><link>https://yio-remote.github.io/documentation/developers/api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yio-remote.github.io/documentation/developers/api/</guid><description>YIO is providing several API Services. To find out more about the different APIs follow the documentation beneth.
YIO Config API The configuration is stored in config.json on the boot partition of the SD card.
Accessing the configuration The configuration class has the following methods:
config.read gives a JSON object. You can also access specific keys within this object: config.read.settings.darkmode for example.
config.write needs a JSON object to write. Example: config.</description></item><item><title>Setup QT IDE</title><link>https://yio-remote.github.io/documentation/developers/build-environment/setup-ide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yio-remote.github.io/documentation/developers/build-environment/setup-ide/</guid><description>Qt Creator Setup Guide The development of the YIO Remote software doesn&amp;rsquo;t require a physical YIO Remote or a Raspberry Pi! The software also runs on Linux, macOS and Windows desktops :-) Of course certain low-level functionality won&amp;rsquo;t work, but otherwise it&amp;rsquo;s fully functional including integrations. It&amp;rsquo;s an easy and fast way to try out the software and developing new features without the cross compile and device deployment round trip overhead.</description></item><item><title>SSH / SCP</title><link>https://yio-remote.github.io/documentation/developers/ssh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yio-remote.github.io/documentation/developers/ssh/</guid><description>YIO-OS supports both SSH and SCP. SSH can be used to get a terminal on the remote while SCP can be used to transfer files from and to the remote.
Depending on the OS your computer is running you might need a SSH or SCP client.
On the remote under settings you&amp;rsquo;ll find its IP address. You can use it to connect.
Credentials Use the following credentials:
user: root
password: yioremote</description></item><item><title>Architecture</title><link>https://yio-remote.github.io/documentation/developers/architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yio-remote.github.io/documentation/developers/architecture/</guid><description>This topic is currently being created and worked on! Technologies UI is written in Qt QML. Device drivers and services are mostly in Qt C++ (v11 and updating to v14). Web configurator: JavaScript and transitioning to Vue.js Captive portal for WiFi configuration: PHP Node.js will be investigated soon in the developer Buildroot image.</description></item><item><title>Setup Ubuntu Developer VM</title><link>https://yio-remote.github.io/documentation/developers/build-environment/setup-virtual-machine/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yio-remote.github.io/documentation/developers/build-environment/setup-virtual-machine/</guid><description>This guide describes the setup of an Ubuntu VM for the complete YIO Remote development.
The development VM supports:
Building, running and debugging the YIO Remote software on the Linux desktop. Creating the custom Linux image for Raspberry Pi Zero using Buildroot. Cross compiling the YIO Remote software for Raspberry Pi Zero. Using Qt Creator to cross compile and deploy directly to the device. Since certain aspects are the same for local development on macOS and Windows, this guide focuses on Linux and cross compilation.</description></item><item><title>Websocket API</title><link>https://yio-remote.github.io/documentation/developers/websocket-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yio-remote.github.io/documentation/developers/websocket-api/</guid><description>There&amp;rsquo;s a websocket based API for communicating with the remote, running on port 946(YIO). Mainly used by the web configurator tool and the YIO Dock.
The API automatically starts on power up and is always running in the background. The API is stopped, before wifi is turned off and started, after wifi is turned on.
Messages are sent in JSON format.
Authentication When a client connects, the remote sends a JSON message:</description></item><item><title>Buildroot</title><link>https://yio-remote.github.io/documentation/developers/build-environment/buildroot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yio-remote.github.io/documentation/developers/build-environment/buildroot/</guid><description>The YIO Remote uses a custom Linux OS for the Raspberry Pi Zero board built with Buildroot. See remote-os repository for details.
At the moment Buildroot is only working on Linux. Our attempts to get it running on macOS have been unsuccessful and on Windows we don&amp;rsquo;t have any expertise. Please contact us if you have a working solution.
The easiest way to use Buildroot on any system is with the provided Docker YIO build image.</description></item><item><title>Coding guidelines</title><link>https://yio-remote.github.io/documentation/developers/contribute/coding-guidelines/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yio-remote.github.io/documentation/developers/contribute/coding-guidelines/</guid><description>Files Common rules for project files:
No spaces allowed in file and directory names Code and text files: No tabs. Use 4 spaces instead. Max line length: 120 characters. UTF-8 encoding (except it&amp;rsquo;s a special system file required to be in another encoding). Do not use the BOM character in UTF-8 files.
It&amp;rsquo;s of no use and certain tools will fail miserable when encountering a BOM (e.g. cpplint).</description></item><item><title>Configuration file</title><link>https://yio-remote.github.io/documentation/developers/configuration-file/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yio-remote.github.io/documentation/developers/configuration-file/</guid><description>About config.json The config.json file is used by the YIO software to determine the integrations, the look and use of YIO.
All data is stored from YIO in this file. To backup the YIO data, only the config.json file has to be backed up.
The following things can be defined in YIOs config file:
Entities Integrations Settings UI_Config Remote Entities Section At the Entity Section you define what devices will be available at the YIO GUI.</description></item><item><title>Creating integrations</title><link>https://yio-remote.github.io/documentation/developers/integrations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yio-remote.github.io/documentation/developers/integrations/</guid><description>Integrations are the interface between YIO-remote and the outside world. Using the &amp;ldquo;smarthome - typical&amp;rdquo; openHAB integration as example the necessary pieces of an integration are explained.
Plugin Project Setup Environment Setup To develop a YIO Remote integration plugin the integrations.library project needs to be checked out and made accessible for the plugin project.
We recommend to check out integrations.library on the same level as the plugin project. I.e. the library can be referenced with the default path .</description></item></channel></rss>